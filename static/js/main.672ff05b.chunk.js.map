{"version":3,"sources":["components/monitorItem.js","App.js","serviceWorker.js","index.js"],"names":["MonitorItem","props","label","number","increase","App","useEffect","getData","setInterval","useState","casos","setCasos","casosHoje","setCasosHoje","mortes","setMortes","mortesHoje","setMortesHoje","criticos","setCriticos","recovered","setRecovered","updateTime","setUpdateTime","a","axios","get","response","console","log","data","cases","todayCases","deaths","todayDeaths","critical","now","Date","toLocaleString","className","role","aria-label","style","display","justifyContent","width","flexDirection","toFixed","marginTop","flex","alignItems","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.672ff05b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MonitorItem = props => {\n  return (\n    <div>\n      <h3>{props.label}</h3>\n      <h1>{props.number}</h1>\n      {props.increase && <h4>+{props.increase} %</h4>}\n    </div>\n  );\n};\n\nexport default MonitorItem;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport MonitorItem from \"./components/monitorItem\";\n\nfunction App() {\n  useEffect(() => {\n    getData();\n    setInterval(() => {\n      getData();\n    }, 2000);\n  }, []);\n  const [casos, setCasos] = useState();\n  const [casosHoje, setCasosHoje] = useState();\n  const [mortes, setMortes] = useState();\n  const [mortesHoje, setMortesHoje] = useState();\n  const [criticos, setCriticos] = useState();\n  const [recovered, setRecovered] = useState();\n  const [updateTime, setUpdateTime] = useState();\n  const getData = async () => {\n    const response = await axios.get(\n      \"https://coronavirus-19-api.herokuapp.com/countries/brazil\"\n    );\n    console.log(\"response\", response.data);\n    setCasos(response.data.cases);\n    setCasosHoje(response.data.todayCases);\n    setMortes(response.data.deaths);\n    setMortesHoje(response.data.todayDeaths);\n    setCriticos(response.data.critical);\n    setRecovered(response.data.recovered);\n    const now = new Date();\n    setUpdateTime(now.toLocaleString(\"pt-BR\"));\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Monitor COVID-19{\" \"}\n          <span role=\"img\" aria-label=\"Bandeira do Brasil\">\n            ðŸ‡§ðŸ‡·\n          </span>\n        </h1>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            width: \"100%\",\n            flexDirection: \"row\"\n          }}\n        >\n          <MonitorItem label=\"Casos totais\" number={casos} />\n          <MonitorItem\n            label=\"Casos hoje\"\n            number={casosHoje}\n            increase={\n              casos && ((casosHoje / (casos - casosHoje)) * 100).toFixed(2)\n            }\n          />\n          <MonitorItem\n            label=\"Casos de Mortes\"\n            number={mortes}\n            increase={\n              mortes && ((mortesHoje / (mortes - mortesHoje)) * 100).toFixed(2)\n            }\n          />\n          <MonitorItem label=\"Casos crÃ­ticos\" number={criticos} />\n        </div>\n        <div\n          style={{\n            marginTop: 28,\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            width: \"100%\",\n            flexDirection: \"row\"\n          }}\n        >\n          <MonitorItem label=\"Curados\" number={recovered} />\n        </div>\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"flex-end\" }}>\n          <h6>Atualizado em: {updateTime}</h6>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}